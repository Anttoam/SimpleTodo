definitions:
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.SignUpRequest:
    properties:
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UpdatePasswordRequest:
    properties:
      id:
        type: integer
      new_password:
        minLength: 6
        type: string
      password:
        minLength: 6
        type: string
      updated_at:
        type: string
    required:
    - id
    - new_password
    - password
    type: object
  dto.UpdateTodoRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    required:
    - id
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    required:
    - id
    type: object
info:
  contact: {}
  description: example todo api
  title: Simple Todo API
  version: "1.0"
paths:
  /todo/:
    get:
      description: Find all todo
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: FindAll
      tags:
      - todo
  /todo/:id:
    delete:
      description: Delete todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Delete
      tags:
      - todo
    get:
      description: Find todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: FindByID
      tags:
      - todo
    put:
      description: Update todo
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Todo Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTodoRequest'
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Update
      tags:
      - todo
  /todo/create:
    post:
      description: Create a new todo
      parameters:
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      responses:
        "303":
          description: ok
          schema:
            type: string
      summary: Create
      tags:
      - todo
  /user/:id:
    put:
      description: Edit user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Edit User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      responses: {}
      summary: Edit User
      tags:
      - user
  /user/login:
    post:
      description: Login user
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      responses: {}
      summary: Login
      tags:
      - user
  /user/logout:
    get:
      description: Logout user
      responses: {}
      summary: Logout
      tags:
      - user
  /user/password/:id:
    put:
      description: Edit password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Edit Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordRequest'
      responses: {}
      summary: Edit Password
      tags:
      - user
  /user/signup:
    post:
      description: Create a new user
      parameters:
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Signup
      tags:
      - user
swagger: "2.0"
