// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Anttoam/SimpleTodo/domain"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, todo, userID
func (_m *TodoRepository) Create(ctx context.Context, todo *domain.Todo, userID int) error {
	ret := _m.Called(ctx, todo, userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Todo, int) error); ok {
		r0 = rf(ctx, todo, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, todoID
func (_m *TodoRepository) Delete(ctx context.Context, todoID int) error {
	ret := _m.Called(ctx, todoID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, todoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, userID
func (_m *TodoRepository) FindAll(ctx context.Context, userID int) ([]*domain.Todo, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*domain.Todo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*domain.Todo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *TodoRepository) FindByID(ctx context.Context, id int) (*domain.Todo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Todo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, todo, todoID
func (_m *TodoRepository) Update(ctx context.Context, todo *domain.Todo, todoID int) error {
	ret := _m.Called(ctx, todo, todoID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Todo, int) error); ok {
		r0 = rf(ctx, todo, todoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDoneStatus provides a mock function with given fields: ctx, todoID, done
func (_m *TodoRepository) UpdateDoneStatus(ctx context.Context, todoID int, done bool) error {
	ret := _m.Called(ctx, todoID, done)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDoneStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, bool) error); ok {
		r0 = rf(ctx, todoID, done)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
