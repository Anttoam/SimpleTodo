// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Anttoam/golang-htmx-todos/dto"

	mock "github.com/stretchr/testify/mock"
)

// TodoUsecase is an autogenerated mock type for the TodoUsecase type
type TodoUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *TodoUsecase) Create(ctx context.Context, req dto.CreateTodoRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateTodoRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, todoID
func (_m *TodoUsecase) Delete(ctx context.Context, todoID int) error {
	ret := _m.Called(ctx, todoID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, todoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, userID
func (_m *TodoUsecase) FindAll(ctx context.Context, userID int) (*dto.FindAllTodoResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 *dto.FindAllTodoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*dto.FindAllTodoResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *dto.FindAllTodoResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.FindAllTodoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, todoID
func (_m *TodoUsecase) FindByID(ctx context.Context, todoID int) (*dto.FindByIDTodoResponse, error) {
	ret := _m.Called(ctx, todoID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *dto.FindByIDTodoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*dto.FindByIDTodoResponse, error)); ok {
		return rf(ctx, todoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *dto.FindByIDTodoResponse); ok {
		r0 = rf(ctx, todoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.FindByIDTodoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, todoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDone provides a mock function with given fields: ctx, todoID
func (_m *TodoUsecase) IsDone(ctx context.Context, todoID int) error {
	ret := _m.Called(ctx, todoID)

	if len(ret) == 0 {
		panic("no return value specified for IsDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, todoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsNotDone provides a mock function with given fields: ctx, todoID
func (_m *TodoUsecase) IsNotDone(ctx context.Context, todoID int) error {
	ret := _m.Called(ctx, todoID)

	if len(ret) == 0 {
		panic("no return value specified for IsNotDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, todoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, req
func (_m *TodoUsecase) Update(ctx context.Context, req dto.UpdateTodoRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateTodoRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoUsecase creates a new instance of TodoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoUsecase {
	mock := &TodoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
